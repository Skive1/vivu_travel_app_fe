import 'package:flutter/material.dart';
import '../widgets/error_dialog.dart';
import '../widgets/success_dialog.dart';

class DialogUtils {
  static bool _isErrorDialogShowing = false;
  static Future<void> showErrorDialog({
    required BuildContext context,
    String? title,
    required String message,
    String? buttonText,
    VoidCallback? onPressed,
    bool useRootNavigator = true,
  }) {
    if (_isErrorDialogShowing) {
      return Future.value();
    }
    _isErrorDialogShowing = true;
    return showDialog<void>(
      context: context,
      useRootNavigator: useRootNavigator,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return ErrorDialog(
          title: title ?? 'Error',
          message: message,
          buttonText: buttonText,
          onPressed: onPressed,
        );
      },
    ).whenComplete(() {
      _isErrorDialogShowing = false;
    });
  }

  static Future<void> showSuccessDialog({
    required BuildContext context,
    String? title,
    required String message,
    String? buttonText,
    VoidCallback? onPressed,
    bool useRootNavigator = true,
  }) {
    return showDialog<void>(
      context: context,
      useRootNavigator: useRootNavigator,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return SuccessDialog(
          title: title ?? 'Success',
          message: message,
          buttonText: buttonText,
          onPressed: onPressed,
        );
      },
    );
  }

  static Future<bool?> showConfirmDialog({
    required BuildContext context,
    String? title,
    required String message,
    String? confirmText,
    String? cancelText,
    Color? confirmColor,
  }) {
    return showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          title: Text(
            title ?? 'Confirm',
            style: const TextStyle(
              fontWeight: FontWeight.w600,
            ),
          ),
          content: Text(
            message,
            style: const TextStyle(
              height: 1.4,
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: Text(cancelText ?? 'Cancel'),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              style: ElevatedButton.styleFrom(
                backgroundColor: confirmColor ?? Colors.red,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: Text(confirmText ?? 'Confirm'),
            ),
          ],
        );
      },
    );
  }

  static Future<void> showLoadingDialog({
    required BuildContext context,
    String? message,
  }) {
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const CircularProgressIndicator(),
                if (message != null) ...[
                  const SizedBox(height: 16),
                  Text(
                    message,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ],
            ),
          ),
        );
      },
    );
  }

  static void hideDialog(BuildContext context) {
    if (Navigator.of(context).canPop()) {
      Navigator.of(context).pop();
    }
  }

  static Future<void> showCustomDialog({
    required BuildContext context,
    required Widget dialog,
  }) async {
    return showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) => dialog,
    );
  }

  /// Parse and format error messages from server responses
  static String _parseErrorMessage(String message) {
    final lowerMessage = message.toLowerCase();
    
    // Handle specific business logic errors
    if (lowerMessage.contains('just check-in') || lowerMessage.contains('already check-in')) {
      return 'B·∫°n ƒë√£ check-in v√†o ho·∫°t ƒë·ªông n√†y r·ªìi.\n\nüí° M·ªói ho·∫°t ƒë·ªông ch·ªâ c√≥ th·ªÉ check-in m·ªôt l·∫ßn.';
    } else if (lowerMessage.contains('not check-in') || lowerMessage.contains('need check-in')) {
      return 'B·∫°n c·∫ßn check-in tr∆∞·ªõc khi check-out.\n\nüí° Vui l√≤ng check-in tr∆∞·ªõc khi th·ª±c hi·ªán check-out.';
    } else if (lowerMessage.contains('already check-out') || lowerMessage.contains('just check-out')) {
      return 'B·∫°n ƒë√£ check-out kh·ªèi ho·∫°t ƒë·ªông n√†y r·ªìi.\n\nüí° M·ªói ho·∫°t ƒë·ªông ch·ªâ c√≥ th·ªÉ check-out m·ªôt l·∫ßn.';
    } else if (lowerMessage.contains('activity not found') || lowerMessage.contains('not exist')) {
      return 'Kh√¥ng t√¨m th·∫•y ho·∫°t ƒë·ªông.\n\nüí° Ho·∫°t ƒë·ªông c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng t·ªìn t·∫°i.';
    } else if (lowerMessage.contains('permission denied') || lowerMessage.contains('not allowed')) {
      return 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.\n\nüí° Li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn.';
    }
    
    // Handle technical errors
    if (lowerMessage.contains('network') || lowerMessage.contains('connection')) {
      return '$message\n\nüí° Ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.';
    } else if (lowerMessage.contains('timeout')) {
      return '$message\n\nüí° K·∫øt n·ªëi ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i sau.';
    } else if (lowerMessage.contains('unauthorized') || lowerMessage.contains('token')) {
      return '$message\n\nüí° Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
    } else if (lowerMessage.contains('server') || lowerMessage.contains('internal')) {
      return '$message\n\nüí° L·ªói t·ª´ server, vui l√≤ng th·ª≠ l·∫°i sau.';
    }
    
    // Return original message if no specific handling
    return message;
  }

  /// Show error dialog with smart error parsing
  static Future<void> showServerErrorDialog({
    required BuildContext context,
    required String serverMessage,
    String? title,
    String? buttonText,
    VoidCallback? onPressed,
    bool useRootNavigator = true,
  }) {
    return showErrorDialog(
      context: context,
      title: title ?? 'L·ªói',
      message: serverMessage,
      buttonText: buttonText,
      onPressed: onPressed,
      useRootNavigator: useRootNavigator,
    );
  }
}
